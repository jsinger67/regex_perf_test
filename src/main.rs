use std::time::Instant;

use regex::Regex;

/// A input file taken from `veryl`. Its size is 157.200 Bytes.
const LEXER_INPUT: &str = include_str!("./input.vl");

// The regex generated by `parol` for `verly` grammar
const REGEX: &str = r#"(?P<G1>\r\n|\r|\n)|(?P<G2>[\s--\r\n]+)|(?P<G5>(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+)|(?P<G6>[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*)|(?P<G7>[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*)|(?P<G8>[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*)|(?P<G9>[0-9]+(?:_[0-9]+)*)|(?P<G10>'[01xzXZ])|(?P<G11>\-:)|(?P<G12>\->)|(?P<G13>\+:)|(?P<G14>\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=)|(?P<G15>\*\*)|(?P<G16>/|%)|(?P<G17>\+|-)|(?P<G18><<<|>>>|<<|>>)|(?P<G19><=|>=|<|>)|(?P<G20>===|==\?|!==|!=\?|==|!=)|(?P<G21>&&)|(?P<G22>\|\|)|(?P<G23>&)|(?P<G24>\^~|\^|~\^)|(?P<G25>\|)|(?P<G26>~&|~\||!|~)|(?P<G27>::)|(?P<G28>:)|(?P<G29>,)|(?P<G30>\$)|(?P<G31>\.\.)|(?P<G32>\.)|(?P<G33>=)|(?P<G34>\#)|(?P<G35>\{)|(?P<G36>\[)|(?P<G37>\()|(?P<G38>\})|(?P<G39>\])|(?P<G40>\))|(?P<G41>;)|(?P<G42>\*)|(?P<G43>\balways_comb\b)|(?P<G44>\balways_ff\b)|(?P<G45>\bassign\b)|(?P<G46>\basync_high\b)|(?P<G47>\basync_low\b)|(?P<G48>\bas\b)|(?P<G49>\bbit\b)|(?P<G50>\bcase\b)|(?P<G51>\bdefault\b)|(?P<G52>\belse\b)|(?P<G53>\benum\b)|(?P<G54>\bexport\b)|(?P<G55>\bf32\b)|(?P<G56>\bf64\b)|(?P<G57>\bfor\b)|(?P<G58>\bfunction\b)|(?P<G59>\bi32\b)|(?P<G60>\bi64\b)|(?P<G61>\bif_reset\b)|(?P<G62>\bif\b)|(?P<G63>\bimport\b)|(?P<G64>\binout\b)|(?P<G65>\binput\b)|(?P<G66>\binst\b)|(?P<G67>\binterface\b)|(?P<G68>\bin\b)|(?P<G69>\blocalparam\b)|(?P<G70>\blogic\b)|(?P<G71>\bmodport\b)|(?P<G72>\bmodule\b)|(?P<G73>\bnegedge\b)|(?P<G74>\boutput\b)|(?P<G75>\bpackage\b)|(?P<G76>\bparameter\b)|(?P<G77>\bposedge\b)|(?P<G78>\bref\b)|(?P<G79>\brepeat\b)|(?P<G80>\breturn\b)|(?P<G81>\bstep\b)|(?P<G82>\bstruct\b)|(?P<G83>\bsync_high\b)|(?P<G84>\bsync_low\b)|(?P<G85>\btri\b)|(?P<G86>\bu32\b)|(?P<G87>\bu64\b)|(?P<G88>\bvar\b)|(?P<G89>[a-zA-Z_][0-9a-zA-Z_]*)|(?P<G90>.)"#;

fn main() {
    let regex = Regex::new(REGEX).unwrap();
    let capture_iter = regex.captures_iter(LEXER_INPUT);
    let mut token_count = 0usize;
    let now = Instant::now();
    for _ in capture_iter {
        token_count += 1;
    }
    let elapsed_time = now.elapsed();
    println!(
        "Tokenizating {} tokens took {} milliseconds.",
        token_count,
        elapsed_time.as_millis()
    );
}
